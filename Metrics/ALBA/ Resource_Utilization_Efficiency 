import java.io.BufferedReader;
import java.io.FileReader;
import java.util.StringTokenizer;

public class RUEMetric {
    private long pid;

    public  RUEMetric() {
        // Get PID of the current Java process
        this.pid = ProcessHandle.current().pid();
    }

    public double getCPUUsage() {
        try (BufferedReader reader = new BufferedReader(new FileReader("/proc/" + pid + "/stat"))) {
            String line = reader.readLine();
            if (line != null) {
                StringTokenizer tokenizer = new StringTokenizer(line);
                // Skip irrelevant fields
                for (int i = 1; i < 14; i++) {
                    tokenizer.nextToken();
                }
                // Extract CPU time spent in user mode and kernel mode
                long utime = Long.parseLong(tokenizer.nextToken());
                long stime = Long.parseLong(tokenizer.nextToken());
                long totalCpuTime = utime + stime;

                // Read total elapsed time since system boot
                long uptime = readUptime();

                // Calculate CPU usage percentage
                return 100.0 * totalCpuTime / uptime;
            } else {
                throw new IllegalStateException("Error: Unable to read CPU usage");
            }
        } catch (Exception e) {
            e.printStackTrace();
            return 0.0; // Return 0 if unable to retrieve CPU usage
        }
    }

//    public double getRAMUsage() {
//        try {
//            // Read memory usage from /proc/[PID]/statm file
//            try (BufferedReader reader = new BufferedReader(new FileReader("/proc/" + pid + "/statm"))) {
//                String line = reader.readLine();
//                if (line != null) {
//                    StringTokenizer tokenizer = new StringTokenizer(line);
//                    // Read resident set size (RSS) in pages
//                    long rss = Long.parseLong(tokenizer.nextToken());
//                    System.out.println("RSS (pages): " + rss); // Debug output
//                    // Get page size
//                    long pageSize = getPageSize();
//                    System.out.println("Page Size (bytes): " + pageSize); // Debug output
//                    // Convert RSS from pages to bytes
//                    long ramUsageBytes = rss * pageSize;
//                    // Convert bytes to megabytes
//                    double ramUsageMB = ramUsageBytes / (1024.0 * 1024.0);
//                    return ramUsageMB;
//                } else {
//                    throw new IllegalStateException("Error: Unable to read RAM usage");
//                }
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//            return 0.0; // Return 0 if unable to retrieve RAM usage
//        }
//    }


    private long readUptime() throws Exception {
        try (BufferedReader reader = new BufferedReader(new FileReader("/proc/uptime"))) {
            String line = reader.readLine();
            if (line != null) {
                return (long) Double.parseDouble(line.split("\\s+")[0]);
            } else {
                throw new IllegalStateException("Error: Unable to read system uptime");
            }
        }
    }

//    public static long getPageSize() {
//        try (BufferedReader reader = new BufferedReader(new FileReader("/proc/meminfo"))) {
//            String line;
//            while ((line = reader.readLine()) != null) {
//                if (line.startsWith("Hugepagesize:")) {
//                    // Print the line for debugging
//                    System.out.println("Line: " + line);
//
//                    // Extract the numeric value from the line
//                    String value = line.replaceAll("\\D+", "");
//                    System.out.println("Value: " + value); // Print the extracted value
//
//                    if (!value.isEmpty()) {
//                        // Parse the page size value (in kilobytes) and convert it to bytes
//                        long pageSizeKB = Long.parseLong(value);
//                        return pageSizeKB * 1024; // Convert kilobytes to bytes
//                    } else {
//                        throw new IllegalStateException("Error: Invalid format for Hugepagesize in /proc/meminfo");
//                    }
//                }
//            }
//            throw new IllegalStateException("Error: Hugepagesize not found in /proc/meminfo");
//        } catch (Exception e) {
//            e.printStackTrace();
//            return 0; // Return 0 if unable to retrieve page size
//        }
// }
}
